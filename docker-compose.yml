

services:
  postgres:
    image: postgres:16
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  backend:
    build:
      context: .
      target: production
    command: bash -c "python -m static.fill_db && uvicorn back.main:app --host 0.0.0.0 --port 8000"
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@${DB_IP}:${DB_PORT}/${DB_NAME}
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
    ports:
      - "8000:8000"
    depends_on:
      - alembic
      - postgres
      - redis
      - rabbitmq
    networks:
      - app-network

  bot:
    build:
      context: .
      target: production
    command: python -m bot
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@${DB_IP}:${DB_PORT}/${DB_NAME}
      REDIS_HOST: redis
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - app-network

  alembic:
    build:
      context: .
      target: production
    command: alembic upgrade head
    restart: no
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@${DB_IP}}:${DB_PORT}/${DB_NAME}
    depends_on:
      - postgres
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge